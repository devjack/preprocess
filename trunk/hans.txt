Dear Mick,

There was a major problem with the installation script setup.py for
preprocess v1.0.3: The install directories were hardcoded so we could
not use the flexibility of Distutils for choosing install directories.

A solution to this problem is to make a package out of preprocess such
that content.types can be installed as package_data. This requires
some new directory structure with lib, lib/preprocess, and bin
directories.  preproces.py now resides in lib/preprocess, while
bin/preprocess is a small executable script importing (and not
copying) preprocess.py (this is pretty standard for Python packages).

The setup.py script is changed such that we can stall wherever Distutils
allows us (done by my student Rolv Bredesen).

Version info is now (1,0,4).

Nothing is done with preprocess.exe (not necessary since there are no updates
from v1.0.3).

I think this clean up of the directory structure is beneficial, but please
make up your own opinion!

Best,
Hans

PS.
Here are the differences between the 1.0.3 and 1.0.4 trees:

-----------------------------------------------
difference between preprocess-1.0.3/test/test_preprocess_inputs.py preprocess-1.0.4/test/test_preprocess_inputs.py
44c44,45
<     preprocess_py = join(dirname(dirname(__file__)), "preprocess.py")
---
>     #preprocess_py = join(dirname(dirname(__file__)), "preprocess.py")
>     preprocess_py = join(dirname(dirname(__file__)), "bin", "preprocess")
-----------------------------------------------
-----------------------------------------------
difference between preprocess-1.0.3/test/test.py preprocess-1.0.4/test/test.py
36a37
> import shutil
72d72
<
92c92,93
<     preprocess_py = join(dirname(dirname(abspath(__file__))), "preprocess.py")
---
>     #preprocess_py = join(dirname(dirname(abspath(__file__))), "preprocess.py")
>     preprocess_py = join(dirname(dirname(abspath(__file__))), "bin", "preprocess") # new path
172a174,185
>     try:
>       import preprocess
>     except ImportError:
>       # preprocess is not yet installed
>       path = abspath(join(os.pardir, "lib"))
>       sys.path.append(path) # Preprocess toolbox
>       os.environ['PYTHONPATH'] += os.pathsep + path
>
>     # preprocess_py (location of  preprocess calling script) is hardcoed
>     # here (_setUp)  and in test_preprocess_inputs.py
>     #sys.path.append(join(os.pardir, "bin")) # Preprocess script
>
-----------------------------------------------
difference between preprocess-1.0.3/PKG-INFO preprocess-1.0.4/PKG-INFO
3c3
< Version: 1.0.3
---
> Version: 1.0.2
-----------------------------------------------
-----------------------------------------------
difference between preprocess-1.0.3/README.txt preprocess-1.0.4/README.txt
5c5
<     (source) http://trentm.com/downloads/preprocess/1.0.3/preprocess-1.0.3.zip
---
>     (source) http://trentm.com/downloads/preprocess/1.0.3/preprocess-1.0.4.zip
14c14
< Requirements    : Python >= 2.3 (http://www.activestate.com/ActivePython/)
---
> Requirements    : Python >= 2.4 (http://www.activestate.com/ActivePython/)
-----------------------------------------------
-----------------------------------------------
difference between preprocess-1.0.3/MANIFEST.in preprocess-1.0.4/MANIFEST.in
1c1
< include *.py *.cpp *.in preprocess.exe Makefile* preprocess *.txt content.types
---
> include *.py *.cpp *.in preprocess.exe Makefile*  *.txt
2a3,4
> include bin/preprocess
> recursive-include lib content.types
-----------------------------------------------
difference between preprocess-1.0.3/setup.py preprocess-1.0.4/setup.py
8a9,16
> # Change by Rolv E. Bredesen:
> # Restructured preprocess as a package so bin and data is correctly installed
> #
> # Usage: python setup.py install [, --prefix=$PREFIX ]
> #
> # Default prefix is location of python interpreter running this script. (/usr)
> # Typical choices are /usr/local, $HOME/ext/Linux etc.
>
16d23
<
19a27
>     sys.path.append('lib')
22,41d29
<
<
< def _getBinDir():
<     """Return the current Python's bindir."""
<     if sys.platform.startswith("win"):
<         bindir = sys.prefix
<     else:
<         bindir = os.path.join(sys.prefix, "bin")
<     return bindir
<
< def _getSiteLibDir():
<     if sys.platform.startswith("win"):
<         sitelibdir = os.path.join(sys.prefix, "Lib", "site-packages")
<     else:
<         ver = '.'.join(map(str, sys.version_info[:2]))
<         sitelibdir = os.path.join(sys.prefix, "lib", "python%s" % ver,
<                                   "site-packages")
<     return sitelibdir
<
<
43a32,33
> srcdir = os.path.join("lib", "preprocess")
> siteFiles = ["content.types"]
45,46c35,36
<     scripts = []
<     binFiles = ["preprocess.exe", "preprocess.py"]
---
>     scripts = ["preprocess.exe",
>                os.path.join(srcdir, "preprocess.py")]
48,53c38,40
<     if os.path.exists("preprocess"):
<         os.remove("preprocess")
<     shutil.copy2("preprocess.py", "preprocess")
<     scripts = ["preprocess"]
<     binFiles = []
< siteFiles = ["content.types"]
---
>     scripts = [os.path.join("bin", "preprocess")]
>
> print _getVersion()
64,65d50
<
<       py_modules=['preprocess'],
67,68c52,54
<       data_files=[ (_getBinDir(), binFiles + siteFiles),
<                    (_getSiteLibDir(), siteFiles) ],
---
>       package_dir = {'': 'lib'},
>       packages=['preprocess'],
>       package_data = {'preprocess': siteFiles}, # requires python2.4-distutils
70d55
<
    preprocess-1.0.4.tar.gz
34K   Download  
Reply
        
Forward
        
    
Hans Petter Langtangen
 to me
    
show details Oct 27
    
    
Reply
    
    
Hi - I sent you a packaging of your GREAT preprocess software,
which we use extensively at my institution, but I saw that
preprocess is still in version 1.0.3. Please consider whether
you want this package which complies to Python standards for
packaging modules.

Best regards,
Hans
